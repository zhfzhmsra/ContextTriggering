//REFERENCE @"Newtonsoft.Json.dll";
//Script GUID:f027eded-bbad-4000-a0a6-71401cc79fe2
//Used for tracking history

Input = 
    SSTREAM @@Input@@;

FeatureHeadersTmp =
    PROCESS Input 
    PRODUCE *
    USING FeatureHeaderReducer(@@SparseFeatVecColumns@@,
                               @@HeaderSuffix@@);

FeatureHeaders =
    REDUCE FeatureHeadersTmp ALL
    USING IntegrateAllRowsReducer(@@SparseFeatVecColumns@@,
                                  @@HeaderSuffix@@);

OUTPUT FeatureHeaders 
TO SSTREAM @@FeatureHeaders@@;
#CS
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ScopeRuntime;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;


/// <summary>
/// For each column of sparse feature group <k,v> pairs, output a corresponding column of the feature names.
/// </summary>
public class FeatureHeaderReducer : Processor
{
    public const string SparseFeatVecColumnsKey = "sfv_cols";
    public const string HeaderSuffixKey = "header_suffix";

    public Dictionary<string, string> GetArgs(string[] args)
    {
        var argDict = new Dictionary<string, string>();
        foreach (var arg in args)
        {
            string[] kv = arg.Split(':');
            if (kv.Length == 2)
            {
                argDict[kv[0]] = kv[1];
            }
        }

        if (!argDict.ContainsKey(HeaderSuffixKey))
        {
            argDict[HeaderSuffixKey] = "Headers";
        }
        
        return argDict;
    }

    /// <summary>
    /// The name of each output column corresponds to the name of a sparse feature group input column, appended by the header suffix.
    /// </summary>
    /// <param name="columns">Defalut input, unused.</param> 
    /// <param name="args">Arguments to specify sparse feature columns and the header suffix.</param>
    /// <param name="input">Input schema, unused.</param>
    /// <returns></returns>
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        Schema output = new Schema();
        var argDict = GetArgs(args);        
        if (argDict.ContainsKey(SparseFeatVecColumnsKey))
        {
            string[] sparseFeatVecColumns = argDict[SparseFeatVecColumnsKey].Split(',');
            output = new Schema(string.Join(",", sparseFeatVecColumns.Select(col => col + argDict[HeaderSuffixKey])));
        }
        return output;
    }

    /// <summary>
    /// Reduces the input to output one row that contains multiple columns, each of which contains the features names
    /// of one input sparse feature group column.
    /// </summary>
    /// <param name="input">Rows that contain columns of sparse feature groups in <k,v> pairs.</param>
    /// <param name="output">One row that contains multiple columns, each of which contains the features names
    /// of one input sparse feature group column.</param>
    /// <param name="args">Arguments to specify sparse feature columns and the header suffix.</param>
    /// <returns></returns>
    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {
        var argDict = GetArgs(args);
        if (argDict.ContainsKey(SparseFeatVecColumnsKey))
        {
            string[] sparseFeatVecColumns = argDict[SparseFeatVecColumnsKey].Split(',');
            var headers = new Dictionary<string, HashSet<string>>();

            foreach (Row row in input.Rows)
            {
                foreach (var col in sparseFeatVecColumns)
                {
                    if (!headers.ContainsKey(col))
                    {
                        headers[col] = new HashSet<string>();
                    }
                    var sparseFeatures = row[col].String;
                    if (!string.IsNullOrEmpty(sparseFeatures))
                    {
                        foreach (var featName in sparseFeatures.Split(' ').Select(kv => kv.Split(':')[0]))
                        {
                            if (!string.IsNullOrEmpty(featName) && !headers[col].Contains(featName))
                            {
                                headers[col].Add(featName);
                            }
                        }
                    }
                }
            }

            foreach (var col in sparseFeatVecColumns)
            {
                var headerList = headers[col].ToList();
                headerList.Sort();
                var s = string.Join(",", headerList);
                if (string.IsNullOrEmpty(s))
                {
                    s = "N/A";
                }
                output[col + argDict[HeaderSuffixKey]].Set(s);
            }            
            yield return output; 
        }
        
    }
}


public class IntegrateAllRowsReducer : Reducer
{
    public const string SparseFeatVecColumnsKey = "sfv_cols";
    public const string HeaderSuffixKey = "header_suffix";

    public Dictionary<string, string> GetArgs(string[] args)
    {
        var argDict = new Dictionary<string, string>();
        foreach (var arg in args)
        {
            string[] kv = arg.Split(':');
            if (kv.Length == 2)
            {
                argDict[kv[0]] = kv[1];
            }
        }

        if (!argDict.ContainsKey(HeaderSuffixKey))
        {
            argDict[HeaderSuffixKey] = "Headers";
        }
        
        return argDict;
    }
    public override Schema Produces(string[] columns, string[] args, Schema input_schema)
    {
        return input_schema.Clone();
    }

    public override IEnumerable<Row> Reduce(RowSet input, Row output, string[] args)
    {
        var argDict = GetArgs(args);
        if (argDict.ContainsKey(SparseFeatVecColumnsKey))
        {
            var sparseFeatVecColumns = argDict[SparseFeatVecColumnsKey]
                .Split(',').Select(dp => dp + argDict[HeaderSuffixKey]);
            var headers = new Dictionary<string, HashSet<string>>();

            foreach (Row row in input.Rows)
            {
                foreach (var col in sparseFeatVecColumns)
                {
                    if (!headers.ContainsKey(col))
                    {
                        headers[col] = new HashSet<string>();
                    }
                    var names = row[col].String;
                    if (!string.IsNullOrEmpty(names))
                    {
                        foreach (var featName in names.Split(','))
                        {
                            if (!string.IsNullOrEmpty(featName) && !headers[col].Contains(featName))
                            {
                                headers[col].Add(featName);
                            }
                        }
                    }
                }
            }

            foreach (var col in sparseFeatVecColumns)
            {
                var headerList = headers[col].ToList();
                headerList.Sort();
                var s = string.Join(",", headerList);
                if (string.IsNullOrEmpty(s))
                {
                    s = "N/A";
                }
                output[col].Set(s);
            }            
            yield return output; 
        }    
    }
}


#ENDCS

// Generated by ScopeStudio, version 1.7.8000.0!
